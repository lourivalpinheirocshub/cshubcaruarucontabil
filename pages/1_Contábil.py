#region IMPORTS
import streamlit as st
import pandas as pd
import plotly.express as plx
from streamlit import connection, dataframe
from streamlit_gsheets import GSheetsConnection
#endregion

# Setor Cont√°bil

def start_page():
    #region MAIN PAGE'S CONFIGURATION
    st.set_page_config("Controle de empresas", page_icon="üìÑ", layout="wide", initial_sidebar_state="auto")
    # Hiding humburguer menu
    hide_st_style = """
                <style>
                #MainMenu {visibility: hidden;}
                footer {visibility: hidden;}
                header {visibility: hidden;}
                </style>
                """
    st.markdown(hide_st_style, unsafe_allow_html=True)
    #endregion

    #region TABS
    main_tabs = st.tabs(["CENTRAL DE INFORMA√á√ïES", "POPs"])
    with main_tabs[0]:
        tabs = st.tabs(["CONTROLE DE EMPRESAS", "CONTROLE DE DEMANDAS", "FERRAMENTAS"])
        with tabs[0]:
            #region CONNECTING TO DATABASE
            conn = st.connection("gsheets", type=GSheetsConnection)
            spreadsheet = conn.read(
                spreadsheet=st.secrets["database"]["spreadsheet"],
                worksheet=st.secrets["database"]["worksheet"]
            )
            # #endregion

            # #region DATAFRAME
            df = pd.DataFrame(spreadsheet)
            #endregion

            #region FILTERED DATAFRAME
            filtered_df = df.copy()

            #region HEADER
            st.header(":material/store: Controle de empresas", divider=True)
            #endregion


            #region CARDS
            company_amount_column, meta_amount_column = st.columns(2, gap="medium")

            # Amount of companies
            with company_amount_column:
                with st.container(border=True):
                    conn = st.connection("gsheets", type=GSheetsConnection)
                    companies_amount_spreadsheet = conn.read(
                        spreadsheet=st.secrets["database"]["spreadsheet"],
                        worksheet=st.secrets["database"]["worksheet"]
                    )
                    companies_amount_dataframe = pd.DataFrame(companies_amount_spreadsheet)

                    company_amount = companies_amount_dataframe["EMPRESAS"].count()
                    st.metric(
                        label=":material/123: Empresas",
                        value=company_amount
                    )

            # Priorities of companies
            with meta_amount_column:
                with st.container(border=True):
                    conn = st.connection("gsheets", type=GSheetsConnection)
                    companies_amount_spreadsheet = conn.read(
                        spreadsheet=st.secrets["database"]["spreadsheet"],
                        worksheet=st.secrets["database"]["worksheet"]
                    )
                    priorities = pd.DataFrame(companies_amount_spreadsheet)

                    priorities_amount = priorities[priorities["META"] == "SIM"]["EMPRESAS"].count()
                    st.metric(
                        label=":material/123: Prioridades",
                        value=priorities_amount
                    )


            #region FILTERS
            meta_filter, regime = st.columns(2, gap="medium")
            with meta_filter:
                # meta_filter
                meta_company = ["TODOS"] + df["META"].unique().tolist()
                selected_meta = st.selectbox(
                    label="Meta",
                    options=meta_company,
                    placeholder="Selecione se a empresa √© meta ou n√£o..."
                )


            with regime:
                # documentation_filter
                regime = ["TODOS"] + df["REGIME_TRIBUT√ÅRIO_APP"].unique().tolist()
                selected_regime = st.selectbox(
                    label="Regime Tribut√°rio",
                    options=regime,
                    placeholder="Selecione o Regime Tribut√°rio..."
                )

            #region DATAFRAME CONDITIONS
            if selected_meta != "TODOS":
                filtered_df =  filtered_df[filtered_df["META"] == selected_meta]

            if selected_regime != "TODOS":
                filtered_df = filtered_df[filtered_df["REGIME_TRIBUT√ÅRIO_APP"] ==  selected_regime]


            #region TABLE
            st.dataframe(filtered_df)
            #endregion


            regime_chart = plx.pie(
                filtered_df.dropna(subset=["REGIME_TRIBUT√ÅRIO_APP"]),
                names="REGIME_TRIBUT√ÅRIO_APP",
                title="Distribui√ß√£o por Regime Tribut√°rio",)
            with st.container(border=True):
                st.plotly_chart(regime_chart, use_container_width=True)

        with tabs[1]:
            #region CONNECTION
            conn = st.connection("gsheets", type=GSheetsConnection)
            task_control = conn.read(
                spreadsheet=st.secrets["database"]["spreadsheet"],
                worksheet=st.secrets["database"]["task_follow_up"]
            )
            task_control_df = pd.DataFrame(task_control).dropna()
            #endregion
            
            #region PAGE
            st.header(":material/format_list_bulleted: Controle de demandas", divider=True)
            
            #region METRICS
            done_companies = task_control_df[task_control_df["status"] == "FINALIZADA"]["empresa"].count()
            pending_companies = task_control_df[task_control_df["status"] == "PENDENTE"]["empresa"].count()
            avarage_date = str(task_control_df["competencia_concluida"].value_counts().mean()).replace(".", ",")
            
            done_tasks_column, pending_tasks_column, avarage_date_column = st.columns(3, gap="medium")
            with pending_tasks_column:
                with st.container(border=True):
                    st.metric(
                            label=":material/check: CONCLU√çDAS",
                            value=done_companies
                        )
                    
            with done_tasks_column:
                with st.container(border=True):
                    st.metric(
                            label=":material/pending: PENDENTES",
                            value=pending_companies
                        )
                    
            with avarage_date_column:
                with st.container(border=True):
                    st.metric(
                            label=":material/date_range: M√âDIA DE DIAS PARA ENTREGA ",
                            value=avarage_date
                        )
            #enregion
            
            companies_column, operation_column, regime_column, competencia_concluida, competencia_pendente = st.columns(5, gap="medium")
            with companies_column:
                # Companies filter
                companies_options = ["TODOS"] + task_control_df["empresa"].unique().tolist()
                selected_company = st.selectbox(
                    label="Empresas...",
                    options=companies_options,
                    placeholder="Selecione a empresa..."
                )
                
            with operation_column:
                # documentation_filter
                operation_options = ["TODOS"] + task_control_df["operacao"].unique().tolist()
                selected_operation = st.selectbox(
                    label="Opera√ß√µes...",
                    options=operation_options,
                    placeholder="Selecione a opera√ß√£o..."
                )
            
            with regime_column:
                # documentation_filter
                regime_options = ["TODOS"] + task_control_df["regime_tributario_app"].unique().tolist()
                selected_regime = st.selectbox(
                    label="Regime",
                    options=regime_options,
                    placeholder="Selecione o regime tribut√°rio..."
                )
                
            with competencia_concluida:
            # documentation_filter
                done_competence_options = ["TODOS"] + task_control_df["competencia_concluida"].unique().tolist()
                selected_competence = st.selectbox(
                    label="Compet√™ncia Conclu√≠da",
                    options=done_competence_options,
                    placeholder="Selecione a compet√™ncia conclu√≠da..."
                )
            
            with competencia_pendente:
            # documentation_filter
                hang_competence_options = ["TODOS"] + task_control_df["competencia_pendente"].unique().tolist()
                selected_pending_competence = st.selectbox(
                    label="Compet√™ncia Pendente",
                    options=hang_competence_options,
                    placeholder="Selecione a compet√™ncia pendente..."
                )
                
            #region DATAFRAME CONDITIONS
            if companies_options != "TODOS":
                task_control_df =  task_control_df[task_control_df["empresa"] == selected_company]

            if selected_operation != "TODOS":
                task_control_df = task_control_df[task_control_df["operacao"] ==  selected_operation]

            if selected_competence != "TODOS":
                task_control_df = task_control_df[task_control_df["competencia_concluida"] ==  selected_competence]

            if selected_pending_competence != "TODOS":
                task_control_df = task_control_df[task_control_df["competencia_pendente"] ==  selected_pending_competence]
            
            #region DATAFRAME
            st.dataframe(task_control_df)
            #endregion
            
            pie_column, bar_column = st.columns(2, gap="medium")
            with pie_column:
                #region CHARTS
                status_chart = plx.pie(
                    task_control_df.dropna(subset=["status"]),
                    names="status",
                    title="Status das demandas",)
                with st.container(border=True):
                    st.plotly_chart(status_chart, use_container_width=True)
            
            with bar_column:
                # Agrupando por respons√°vel e status e contando as demandas
                responsable_status_df = task_control_df.groupby(['responsavel', 'status'])['operacao'].count().reset_index()

                # Criando o gr√°fico de barras
                responsable_chart = plx.bar(
                    responsable_status_df,
                    x="responsavel",
                    y="operacao",
                    color="status",
                    barmode="stack",  # Empilhar as barras para cada respons√°vel
                    labels={'responsavel': 'Respons√°vel', 'operacao': 'Quantidade de Demandas'},
                    title="Demandas por Respons√°vel",
                )

                # Exibindo o gr√°fico no Streamlit
                with st.container(border=True):
                    st.plotly_chart(responsable_chart, use_container_width=True)

        with tabs[2]:
            data = {
                "DEBITO": [],
                "CREDITO": [],
                "DATA": [],
                "VALOR": [],
                "HISTORICO": [],
                "MATRIZ": [],
                "FILIAL": []
            }
            nfse_df = pd.DataFrame(data)

            if 'nfse' not in st.session_state:
                    st.session_state['nfse'] = nfse_df
            
            st.header(":material/note: NFSe", divider=True)

            form_column, table_add_column = st.columns(2, gap="medium")
            with form_column:
                with st.form("nfseData", enter_to_submit=False, clear_on_submit=True):
                    debitColumn, creditColumn = st.columns(2, gap="small")
                    with debitColumn:
                        debit = st.text_input(label="D√âBITO")

                    with creditColumn:
                        credit = st.text_input(label="CR√âDITO")

                    dateColumn, amountColumn = st.columns(2, gap="small")
                    with dateColumn:
                        factDate = st.date_input(label='DATA', format="DD/MM/YYYY")

                    with amountColumn:
                        amount = st.number_input(label="VALOR")

                    description = st.text_area(label="HIST√ìRICO", value="Vlr. da Aquisicao de Servi√ßos Conf. NF")

                    matrixColumn, filialColumn = st.columns(2, gap="small")
                    with matrixColumn:
                        matrix = st.text_input(label="MATRIZ")

                    with filialColumn:
                        filial = st.text_input(label="FILIAL")

                    submit = st.form_submit_button(label="ENVIAR")

                    if submit:
                        if not all([debit, credit, factDate, amount, description, matrix, filial]):
                            st.error("‚ùå Preencha todos os campos!")
                        else:
                            new_data = {
                                'DEBITO': debit,
                                'CREDITO': credit,
                                'DATA': factDate,
                                'VALOR': amount,
                                'HISTORICO': description,
                                'MATRIZ': matrix,
                                'FILIAL': filial
                            }
                            new_row_df = pd.DataFrame([new_data])
                            st.session_state['nfse'] = pd.concat([st.session_state['nfse'], new_row_df], ignore_index=True)
                            st.success("‚úÖ Dados adicionados com sucesso!")

            with table_add_column:
                st.dataframe(st.session_state["nfse"])

        footer = """
            <style>
            /* Hide default Streamlit footer */
            footer {visibility: hidden;}

            .footer-custom {
                position: relative;
                bottom: 0;
                width: 100%;
                text-align: center;
                font-size: 14px;
                color: #ffff;
                padding: 10px 0;
                margin-top: auto;
            }
            </style>

            <div class="footer-custom">
                ¬© <strong>CSHUB Caruaru Cont√°bil<strong/> - Todos os direitos reservados
            </div>
            """
        st.markdown(footer, unsafe_allow_html=True)

    with main_tabs[1]:
        st.header(":material/description: POPs", divider=True)
        with st.expander("LAN√áAMENTO DE DAEs"):
            st.markdown("""
                        ## [Procedimento Operacional Padr√£o - Lan√ßamento de DAEs](https://docs.google.com/document/d/14LJMOEW2QWC8CGlrIezSUJLqW_Mk-xLqe14Q8ez7r1I/edit?usp=sharing)
                        
                        ---
                        """)
            
            st.markdown("""
                        ### Emiss√£o de rela√ß√£o de pagamentos
                        
                        1. Na tela principal do m√≥dulo Cont√°bil, acesse o menu CONTROLE > EMPRESAS;
                        2. Anote o CNPJ da Empresa dispon√≠vel em uma tela como esta;
                        3. Acesse o site [E-FISCO](https://efisco.sefaz.pe.gov.br/sfi_com_sca/Menu/) e selecione a op√ß√£o de certificado digital no canto superior direito do site:
                        4. Selecione o certificado digital da Caruaru Cont√°bil instalado em sua m√°quina e clique em **OK** (caso n√£o esteja, pe√ßa ajuda ao seu l√≠der para instalar, al√©m de estar para usar o **POP** de Instala√ß√£o de Certificado Digital);
                        5. Selecione a op√ß√£o **‚ÄúCERTID√ÉO DE RECOLHIMENTO DE TRIBUTOS‚Äù** destacada em vermelho na imagem abaixo:
                        6. Selecione a op√ß√£o **‚ÄúCNPJ‚Äù** em **‚ÄúTIPO DE DOCUMENTO DE IDENTIFICA√á√ÉO DE PESSOA F√çSICA‚Äù**:
                        7. Preencha o campo **‚ÄúN√öMERO DO DOCUMENTO DE IDENTIFICA√á√ÉO‚Äù** com o CNPJ da empresa, e o campo **‚ÄúDATA ARRECADA√á√ÉO‚Äù** com o per√≠odo do qual quer emitir o relat√≥rio;
                        8. Clique na op√ß√£o **‚ÄúVISUALIZAR/IMPRIMIR DOCUMENTO‚Äù**:
                        9. Salve o relat√≥rio na pasta da empresa, contida no caminho a seguir:
                        """)
            
            folder_path = r"G:\.shortcut-targets-by-id\14G_xfb2VmL4jbEwgtEDD51yKLuXqf1o1\CARUARU CONT√ÅBIL   CSHUB - DEPARTAMENTO CONT√ÅBIL"
            st.code(folder_path, language="bash")
            
            st.markdown("OBS.: O caminho pode mudar, dependendo de como o Drive foi instalado em sua m√°quina. Em caso de problemas ou d√∫vidas, por favor, pe√ßa ajuda ao seu l√≠der.")
            
            
            st.markdown("""
                        ### Lan√ßamentos
                        ---
                        
                        Uma vez em posse do relat√≥rio, √© importante prestar aten√ß√£o na coluna de **‚ÄúC√ìDIGO RECEITA‚Äù**. No caso deste relat√≥rio, apenas o **DAE 380-5** foi encontrado. Iremos observar a forma de lan√ßamento dele.
                        
                        Assim ficaria o lan√ßamento:
                        """)
            
            st.dataframe(
                {
                    "D√âBITO": ["IPVA"],
                    "CR√âDITO": ["CAIXA GERAL"]
                }
            )
            st.warning("""
                       ### Aten√ß√£o:
                       
                       1. Classifica√ß√£o **3.2.2** - Despesa;
                       2. Caso tenha certeza que o pagamento foi pago pelo banco, pode alterar a conta do cr√©dito para o banco correspondente
                       """)
            st.markdown("Sempre prestar aten√ß√£o nas contas debitadas e creditadas, al√©m do hist√≥rico. Iremos listar alguns dos c√≥digos mais comuns e ao que  se referem:")
            st.dataframe(
                {
                    "C√ìDIGO": ["380-5", "058-2", "998-0"],
                    "DESCRI√á√ÉO": ["IPVA", "FRONTEIRA", "PARCELAMENTO ESTADUAL"]
                }
            )
            
            st.markdown("**OBS.:** o **DAE 058-2** requer uma aten√ß√£o maior, pois a empresa pode se utilizar do cr√©dito de ICMS, e isso deve ser consultado no m√≥dulo Fiscal e, caso confirmado, detalhado no lan√ßamento Cont√°bil.")
            
            st.markdown("""
                        ### CONSULTA DE CR√âDITO - M√ìDULO FISCAL
                        ---
                        
                        1. Acesse o menu MOVIMENTOS > OUTROS > IMPOSTOS LAN√áADOS > ESTADUAL;
                        2. Ao clicar, a tela de consulta aparece e n√≥s listamos o DAE pela data e valor, clicando na op√ß√£o ‚ÄúLISTAGEM‚Äù e preenchendo os campos de data e valor;
                        3. Uma vez que listamos, h√° tr√™s possibilidades:
                        
                            - Encontrar o lan√ßamento,  que quer  dizer  que houve cr√©dito de ICMS lan√ßado pelo Fiscal;
                            - N√£o encontrar o lan√ßamento, caso no qual podemos usar mais vari√°veis do campo ‚ÄúLISTAGEM‚Äù para tentar encontr√°-lo;
                            - N√£o encontrar mesmo com diversas vari√°veis, deduzindo que n√£o houve cr√©dito.
                        """)
            
            st.markdown("Uma vez que identificamos o cr√©dito do ICMS, realizaremos um lan√ßamento de 2¬∫ F√≥rmula, usando a conta ‚ÄúICMS A RECUPERAR‚Äù para enfatizar o cr√©dito detalhado no Fiscal.")
            
            st.markdown("""
                        ### Destrinchando o lan√ßamento com cr√©dito de ICMS
                        ---
                        
                        Uma vez que identificamos o cr√©dito do ICMS, realizaremos um lan√ßamento de 2¬∫ F√≥rmula, usando a conta ‚ÄúICMS A RECUPERAR‚Äù para enfatizar o cr√©dito detalhado no Fiscal.
                        """)
            
            footer = """
            <style>
            /* Hide default Streamlit footer */
            footer {visibility: hidden;}

            .footer-custom {
                position: relative;
                bottom: 0;
                width: 100%;
                text-align: center;
                font-size: 14px;
                color: #ffff;
                padding: 10px 0;
                margin-top: auto;
            }
            </style>

            <div class="footer-custom">
                ¬© <strong>CSHUB Caruaru Cont√°bil<strong/> - Todos os direitos reservados
            </div>
            """
        st.markdown(footer, unsafe_allow_html=True)
        
def side_bar():
    with st.sidebar:
        footer = """
        <style>
        /* Hide default Streamlit footer */
        footer {visibility: hidden;}

        .footer-custom {
            position: relative;
            bottom: 0;
            width: 100%;
            text-align: center;
            font-size: 14px;
            color: #ffff;
            padding: 10px 0;
            margin-top: auto;
        }
        </style>

        <div class="footer-custom">
            ¬© <strong>CSHUB Caruaru Cont√°bil<strong/> - Todos os direitos reservados
        </div>
        """
        st.markdown(footer, unsafe_allow_html=True)

if __name__ == "__main__":
    start_page()
    side_bar()
